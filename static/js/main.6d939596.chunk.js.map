{"version":3,"sources":["Counter/Customization/Customization.module.css","Counter/Display/Display.module.css","Counter/Counter.module.css","Counter/Button/Button.module.css","Counter/Display/Display.tsx","Counter/Button/Button.tsx","Counter/Counter.tsx","redux/counter-reducer.ts","Counter/CounterContainer.tsx","Counter/Customization/CustomizationDisplay.tsx","Counter/Customization/Сustomization.tsx","Counter/Customization/СustomizationContainer.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","Display","props","newStartValue","newMaxValue","className","s","display","style","color","startValue","maxValue","textAlign","currentValue","maxCount","Button","button","onClick","callBack","disabled","title","Counter","counterBlock","buttonsPanel","incCount","reCount","InitialState","CounterContainer","dispatch","useDispatch","counter","useSelector","state","type","CustomizationDisplay","customisationDisplay","incorrect","value","onChange","e","maxValueChange","Number","currentTarget","startValueChange","Customization","customisationBlock","setCustomization","CustomizationContainer","setNewMaxValue","setNewStartValue","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","stateCopy","newCurrentValue","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,mBAAqB,0CAA0C,qBAAuB,4CAA4C,UAAY,mC,iBCAhKD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,4B,iBCAhED,EAAOC,QAAU,CAAC,aAAe,gC,qBCAjCD,EAAOC,QAAU,CAAC,OAAS,yB,4MC4BZC,MAlBf,SAAiBC,GAEb,OAAGA,EAAMC,cAAgB,GACrBD,EAAME,YAAc,GACpBF,EAAMC,eAAiBD,EAAME,YACtB,yBAAKC,UAAS,UAAKC,IAAEC,SAAWC,MAAO,CAACC,MAAO,QAA/C,oBAERP,EAAMC,gBAAkBD,EAAMQ,YAAcR,EAAME,cAAgBF,EAAMS,SAChE,yBAAKN,UAAS,UAAKC,IAAEC,SAAWC,MAAO,CAACC,MAAO,aAAcG,UAAW,WAAxE,gCAIP,yBAAKP,UAAS,UAAKC,IAAEC,QAAP,YAAkBL,EAAMW,eAAiBX,EAAMS,SAAWL,IAAEQ,SAAW,KAChFZ,EAAMW,e,iBCdNE,EAAS,SAACb,GACnB,OACI,4BAAQG,UAAWC,IAAEU,OAAQC,QAASf,EAAMgB,SAAUC,SAAUjB,EAAMiB,UACjEjB,EAAMkB,QCINC,EAAU,SAACnB,GAEpB,OACI,yBAAKG,UAAWC,IAAEgB,cACd,yBAAKjB,UAAWC,IAAEC,SACd,kBAAC,EAAD,CAASM,aAAcX,EAAMW,aAAcF,SAAUT,EAAMS,SAAUD,WAAYR,EAAMQ,WAC9EN,YAAaF,EAAME,YAAaD,cAAeD,EAAMC,iBAElE,yBAAKE,UAAWC,IAAEiB,cACd,kBAAC,EAAD,CAAQH,MAAO,MAAOF,SAAUhB,EAAMsB,SAC9BL,SAAUjB,EAAMW,eAAiBX,EAAMS,WAC/C,kBAAC,EAAD,CAAQS,MAAO,QAASF,SAAUhB,EAAMuB,QAASN,SAAUjB,EAAMW,eAAiBX,EAAMQ,gB,OCpBlGgB,EAAoB,CACtBhB,WAAY,EACZC,SAAU,EACVE,aAAc,EACdV,cAAe,EACfC,YAAa,GCNJuB,EAAmB,WAE5B,IAAIC,EAAWC,cACXC,EAAUC,aAAmC,SAAAC,GAAK,OAAIA,EAAMF,WAUhE,OACI,kBAAC,EAAD,CAASjB,aAAciB,EAAQjB,aACtBF,SAAUmB,EAAQnB,SAClBD,WAAYoB,EAAQpB,WACpBN,YAAa0B,EAAQ1B,YACrBD,cAAe2B,EAAQ3B,cACvBqB,SAdE,WACXI,EDgCG,CAACK,KAAM,qBClBDR,QAXC,WACVG,ED+BG,CAACK,KAAM,oB,gBEPHC,MA/Bf,SAA8BhC,GAU1B,OACI,yBAAKG,UAAWC,IAAE6B,sBACd,6BACI,2CAAgB,2BACZ9B,UAAS,UAAKH,EAAME,YAAc,GAAKF,EAAME,cAAgBF,EAAMC,eACnED,EAAME,YAAcF,EAAMC,cAAgBG,IAAE8B,UAAY,IACxDH,KAAK,SAASI,MAAOnC,EAAME,YAC3BkC,SAfO,SAACC,GACpBrC,EAAMsC,eAAeC,OAAOF,EAAEG,cAAcL,aAiBxC,6BACI,6CAAkB,2BACdhC,UAAS,UAAKH,EAAMC,cAAgB,GAAKD,EAAME,cAAgBF,EAAMC,eACrED,EAAME,YAAcF,EAAMC,cAAgBG,IAAE8B,UAAY,IACxDH,KAAK,SAASI,MAAOnC,EAAMC,cAC3BmC,SAnBS,SAACC,GACtBrC,EAAMyC,iBAAiBF,OAAOF,EAAEG,cAAcL,eCWvCO,MAff,SAAuB1C,GAEnB,OACI,yBAAKG,UAAWC,IAAEuC,oBACd,kBAAC,EAAD,CAAsBzC,YAAaF,EAAME,YAAaD,cAAeD,EAAMC,cACrDqC,eAAgBtC,EAAMsC,eACtBG,iBAAkBzC,EAAMyC,mBAC9C,kBAAC,EAAD,CAAQvB,MAAO,MAAOF,SAAUhB,EAAM4C,iBAAkB3B,SACpDjB,EAAMC,cAAgB,IACtBD,EAAME,YAAc,GAChBF,EAAMC,eAAiBD,EAAME,iBChBpC2C,EAAyB,WAElC,IAAInB,EAAWC,cAEXC,EAAUC,aAAmC,SAAAC,GAAK,OAAIA,EAAMF,WAchE,OACI,kBAAC,EAAD,CAAe1B,YAAa0B,EAAQ1B,YAAaD,cAAe2B,EAAQ3B,cACzDqC,eAdE,SAACpC,GAClBwB,EJoCsB,SAACxB,GAC3B,MAAO,CAAC6B,KAAM,mBAAoB7B,eIrCrB4C,CAAe5C,KAcTuC,iBAXI,SAACxC,GACpByB,EJmCwB,SAACzB,GAC7B,MAAO,CAAC8B,KAAM,qBAAsB9B,iBIpCvB8C,CAAiB9C,KAUyB2C,iBAPnB,WAChClB,EJmCG,CAACK,KAAM,0BK1CHiB,EAVH,WAER,OACI,yBAAK7C,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEQ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAcC,YAAgB,CAChC3B,QPY0B,WAAkD,IAAjDE,EAAgD,uDAAnCN,EAAcgC,EAAqB,uCAC3E,OAAQA,EAAOzB,MACX,IAAK,kBACD,IAAI0B,EAAS,eAAO3B,GAChB4B,EAAkBD,EAAU9C,aAGhC,OAFA+C,IACAD,EAAU9C,aAAe+C,EAClBD,EAEX,IAAK,cACD,IAAIA,EAAS,eAAO3B,GACpB,OAAO,eAAI2B,EAAX,CAAsB9C,aAAc8C,EAAUjD,aAElD,IAAK,mBACD,OAAO,eAAIsB,EAAX,CAAkB5B,YAAasD,EAAOtD,cAE1C,IAAK,qBACD,OAAO,eAAI4B,EAAX,CAAkB7B,cAAeuD,EAAOvD,gBAE5C,IAAK,oBACD,IAAIwD,EAAS,eAAO3B,GACpB,OAAO,eAAI2B,EAAX,CAAsBjD,WAAYiD,EAAUxD,cAAeQ,SAAUgD,EAAUvD,YAAaS,aAAc8C,EAAUxD,gBAExH,QACI,OAAO6B,MOjCN6B,EAAQC,YAAYN,GAKjCJ,OAAOS,MAAQA,ECJfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d939596.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customisationBlock\":\"Customization_customisationBlock__2nuGJ\",\"customisationDisplay\":\"Customization_customisationDisplay__3s0mD\",\"incorrect\":\"Customization_incorrect__2NWo0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__1IQpa\",\"maxCount\":\"Display_maxCount__3oHE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBlock\":\"Counter_counterBlock__HouOy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3Nxxj\"};","import React from 'react'\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    startValue: number\r\n    newMaxValue: number\r\n    newStartValue: number\r\n}\r\n\r\nfunction Display(props: DisplayPropsType) {\r\n\r\n    if(props.newStartValue < 0 ||\r\n        props.newMaxValue < 0 ||\r\n        props.newStartValue >= props.newMaxValue) {\r\n        return <div className={`${s.display}`} style={{color: 'red'}}>Incorrect value!</div>\r\n    }\r\n    if(props.newStartValue !== props.startValue || props.newMaxValue !== props.maxValue) {\r\n        return <div className={`${s.display}`} style={{color: 'mediumblue', textAlign: 'center'}}>Enter values and press 'set'</div>\r\n    }\r\n\r\n    return (\r\n        <div className={`${s.display} ${props.currentValue === props.maxValue ? s.maxCount : ''}`}>\r\n            {props.currentValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react'\r\nimport s from './Button.module.css'\r\n\r\n\r\ntype ButtonPropsType = {\r\n    title: 'inc' | 'reset' | 'set'\r\n    callBack: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button className={s.button} onClick={props.callBack} disabled={props.disabled}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Counter.module.css'\r\nimport Display from './Display/Display';\r\nimport {Button} from './Button/Button';\r\nimport {useDispatch,} from 'react-redux';\r\nimport {incrementCount, resetCount} from '../redux/counter-reducer';\r\n\r\ntype CounterPropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    startValue: number\r\n    newMaxValue: number\r\n    newStartValue: number\r\n    incCount: () => void\r\n    reCount: () => void\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n    return (\r\n        <div className={s.counterBlock}>\r\n            <div className={s.display}>\r\n                <Display currentValue={props.currentValue} maxValue={props.maxValue} startValue={props.startValue}\r\n                         newMaxValue={props.newMaxValue} newStartValue={props.newStartValue}/>\r\n            </div>\r\n            <div className={s.buttonsPanel}>\r\n                <Button title={'inc'} callBack={props.incCount}\r\n                        disabled={props.currentValue === props.maxValue ? true : false}/>\r\n                <Button title={'reset'} callBack={props.reCount} disabled={props.currentValue === props.startValue ? true : false}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export type one = {\r\n    startValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n    newStartValue: number\r\n    newMaxValue: number\r\n}\r\n\r\nconst InitialState: one = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    newStartValue: 0,\r\n    newMaxValue: 5\r\n}\r\n\r\nexport const counterReducer = (state: one = InitialState, action: any): one => {\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT': {\r\n            let stateCopy = {...state}\r\n            let newCurrentValue = stateCopy.currentValue\r\n            newCurrentValue++\r\n            stateCopy.currentValue = newCurrentValue\r\n            return stateCopy\r\n        }\r\n        case 'RESET_COUNT': {\r\n            let stateCopy = {...state}\r\n            return {...stateCopy, currentValue: stateCopy.startValue}\r\n        }\r\n        case 'MAX_VALUE_CHANGE': {\r\n            return {...state, newMaxValue: action.newMaxValue}\r\n        }\r\n        case 'START_VALUE_CHANGE': {\r\n            return {...state, newStartValue: action.newStartValue}\r\n        }\r\n        case 'SET_CUSTOMIZATION': {\r\n            let stateCopy = {...state}\r\n            return {...stateCopy, startValue: stateCopy.newStartValue, maxValue: stateCopy.newMaxValue, currentValue: stateCopy.newStartValue}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementCount = () => {\r\n    return {type: 'INCREMENT_COUNT'}\r\n}\r\nexport const resetCount = () => {\r\n    return {type: 'RESET_COUNT'}\r\n}\r\nexport const setNewMaxValue = (newMaxValue: number) => {\r\n    return {type: 'MAX_VALUE_CHANGE', newMaxValue}\r\n}\r\nexport const setNewStartValue = (newStartValue: number) => {\r\n    return {type: 'START_VALUE_CHANGE', newStartValue}\r\n}\r\nexport const setCustomization = () => {\r\n    return {type: 'SET_CUSTOMIZATION'}\r\n}","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/store';\r\nimport {Counter} from './Counter';\r\nimport {incrementCount, one, resetCount} from '../redux/counter-reducer';\r\n\r\n\r\nexport const CounterContainer = () => {\r\n\r\n    let dispatch = useDispatch()\r\n    let counter = useSelector<AppRootStateType, one>(state => state.counter)\r\n\r\n    let incCount = () => {\r\n        dispatch(incrementCount())\r\n    }\r\n\r\n    let reCount = () => {\r\n        dispatch(resetCount())\r\n    }\r\n\r\n    return (\r\n        <Counter currentValue={counter.currentValue}\r\n                 maxValue={counter.maxValue}\r\n                 startValue={counter.startValue}\r\n                 newMaxValue={counter.newMaxValue}\r\n                 newStartValue={counter.newStartValue}\r\n                 incCount={incCount}\r\n                 reCount={reCount}\r\n        />\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Customization.module.css'\r\n\r\ntype CustomizationDisplayPropsType = {\r\n    newMaxValue: number\r\n    newStartValue: number\r\n    maxValueChange: (newMaxValue: number) => void\r\n    startValueChange: (newStartValue: number) => void\r\n}\r\n\r\nfunction CustomizationDisplay(props: CustomizationDisplayPropsType) {\r\n\r\n    let onMaxValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.maxValueChange(Number(e.currentTarget.value));\r\n    }\r\n\r\n    let onStartValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.startValueChange(Number(e.currentTarget.value));\r\n    }\r\n\r\n    return (\r\n        <div className={s.customisationDisplay}>\r\n            <div>\r\n                <label>max value<input\r\n                    className={`${props.newMaxValue < 0 || props.newMaxValue === props.newStartValue ||\r\n                    props.newMaxValue < props.newStartValue ? s.incorrect : ''}`}\r\n                    type='number' value={props.newMaxValue}\r\n                    onChange={onMaxValueChange}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>start value<input\r\n                    className={`${props.newStartValue < 0 || props.newMaxValue === props.newStartValue ||\r\n                    props.newMaxValue < props.newStartValue ? s.incorrect : ''}`}\r\n                    type='number' value={props.newStartValue}\r\n                    onChange={onStartValueChange}/></label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomizationDisplay;","import React from 'react';\r\nimport CustomizationDisplay from './CustomizationDisplay';\r\nimport {Button} from '../Button/Button';\r\nimport s from './Customization.module.css'\r\n\r\ntype CustomizationPropsType = {\r\n    newMaxValue: number\r\n    newStartValue: number\r\n    maxValueChange: (maxValue: number) => void\r\n    startValueChange: (startValue: number) => void\r\n    setCustomization: () => void\r\n}\r\n\r\nfunction Customization(props: CustomizationPropsType) {\r\n\r\n    return (\r\n        <div className={s.customisationBlock}>\r\n            <CustomizationDisplay newMaxValue={props.newMaxValue} newStartValue={props.newStartValue}\r\n                                  maxValueChange={props.maxValueChange}\r\n                                  startValueChange={props.startValueChange}/>\r\n            <Button title={'set'} callBack={props.setCustomization} disabled={\r\n                props.newStartValue < 0 ? true : false ||\r\n                props.newMaxValue < 0 ? true : false ||\r\n                    props.newStartValue >= props.newMaxValue}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Customization;","import React from 'react';\r\nimport Customization from './Сustomization';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {one, setCustomization, setNewMaxValue, setNewStartValue} from '../../redux/counter-reducer';\r\n\r\n\r\nexport const CustomizationContainer = () => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    let counter = useSelector<AppRootStateType, one>(state => state.counter)\r\n\r\n    let maxValueChange = (newMaxValue: number) => {\r\n        dispatch(setNewMaxValue(newMaxValue))\r\n    }\r\n\r\n    let startValueChange = (newStartValue: number) => {\r\n        dispatch(setNewStartValue(newStartValue))\r\n    }\r\n\r\n    let onButtonSetCustomizationClick = () => {\r\n        dispatch(setCustomization())\r\n    }\r\n\r\n    return (\r\n        <Customization newMaxValue={counter.newMaxValue} newStartValue={counter.newStartValue}\r\n                       maxValueChange={maxValueChange}\r\n                       startValueChange={startValueChange} setCustomization={onButtonSetCustomizationClick}/>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {CounterContainer} from './Counter/CounterContainer';\nimport {CustomizationContainer} from './Counter/Customization/СustomizationContainer';\n\nconst App = () => {\n\n    return (\n        <div className=\"App\">\n            <CounterContainer />\n            <CustomizationContainer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}